const { cmd } = require('../command');
const axios = require('axios');
const cheerio = require('cheerio');

async function scrapeHiruNews() {
    try {
        const response = await axios.get('https://www.hirunews.lk/sinhala/', {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });

        const $ = cheerio.load(response.data);
        const news = [];

        // Scrape latest news
        $('.main-news').each((i, element) => {
            if (i < 4) { // Get top 4 news
                const title = $(element).find('.main-news-heading').text().trim();
                const time = $(element).find('.time').text().trim();
                news.push({ title, time });
            }
        });

        return news;
    } catch (error) {
        console.error('Scraping error:', error);
        return null;
    }
}

cmd({
    pattern: "news",
    desc: "Get latest Hiru news",
    category: "news",
    react: "üì∞",
    filename: __filename,
}, async (conn, message, m, { reply }) => {
    try {
        // Send initial message
        await reply("üîÑ ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∂±‡∑í‡∂∏‡∑í‡∂±‡∑ä... ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±.");

        // Scrape news
        const news = await scrapeHiruNews();
        
        if (!news) {
            return await reply("‚ùå ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        // Format news message
        let newsMsg = `*üì∞ ‡∑Ñ‡∑í‡∂ª‡∑î ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä - LIVE UPDATE*\n`;
        newsMsg += `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n`;

        news.forEach((item, index) => {
            newsMsg += `*${index + 1}. ${item.title}*\n`;
            newsMsg += `‚è∞ ${item.time}\n\n`;
        });

        newsMsg += `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
        newsMsg += `üì± Powered by: NAVIYA MD\n`;
        newsMsg += `‚ö° User: ${message.pushName}\n`;
        newsMsg += `üïê Updated: ${new Date().toLocaleTimeString()}`;

        await conn.sendMessage(message.key.remoteJid, { 
            text: newsMsg,
            quoted: message 
        });

    } catch (error) {
        console.error("Error:", error);
        await reply("‚ùå Error fetching news");
    }
});

// Auto update variable
let updateInterval;

cmd({
    pattern: "autostart",
    desc: "Start auto news updates",
    category: "news",
    filename: __filename,
}, async (conn, message, m, { reply }) => {
    try {
        if (updateInterval) {
            return await reply("‚ö†Ô∏è Auto updates ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∫‡∑í!");
        }

        updateInterval = setInterval(async () => {
            try {
                const news = await scrapeHiruNews();
                if (news) {
                    let newsMsg = `*üì∞ ‡∑Ñ‡∑í‡∂ª‡∑î ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä - AUTO UPDATE*\n`;
                    newsMsg += `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n`;

                    news.forEach((item, index) => {
                        newsMsg += `*${index + 1}. ${item.title}*\n`;
                        newsMsg += `‚è∞ ${item.time}\n\n`;
                    });

                    newsMsg += `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
                    newsMsg += `üì± Powered by: NAVIYA MD\n`;
                    newsMsg += `‚ö° Auto Update System`;

                    await conn.sendMessage(message.key.remoteJid, { 
                        text: newsMsg,
                        quoted: message 
                    });
                }
            } catch (err) {
                console.error("Auto update error:", err);
            }
        }, 60000); // Every 1 minute

        await reply("‚úÖ Real-time news updates started!");

    } catch (error) {
        console.error("Error:", error);
        await reply("‚ùå Error starting auto updates");
    }
});

cmd({
    pattern: "autostop",
    desc: "Stop auto news updates",
    category: "news",
    filename: __filename,
}, async (conn, message, m, { reply }) => {
    try {
        if (!updateInterval) {
            return await reply("‚ö†Ô∏è No auto updates running!");
        }

        clearInterval(updateInterval);
        updateInterval = null;
        await reply("‚úÖ News auto updates stopped!");

    } catch (error) {
        console.error("Error:", error);
        await reply("‚ùå Error stopping auto updates");
    }
});
